// PassengerPlane.h

class PassengerPlane {
public:
    virtual void fly() = 0;
};

class BoeingPassengerPlane : public PassengerPlane {
public:
    virtual void fly() override;
};

class AirbusPassengerPlane : public PassengerPlane {
public:
    virtual void fly() override;
};

// PassengerPlaneFactory.h

#ifdef DLL_EXPORTS
#define DLL_API __declspec(dllexport)
#else
#define DLL_API __declspec(dllimport)
#endif

class DLL_API PassengerPlaneFactory {
public:
    static PassengerPlane* create_passenger_plane(const char* manufacturer);
};

// PassengerPlaneFactory.cpp

#include "PassengerPlaneFactory.h"
#include "PassengerPlane.h"
#include <string>

PassengerPlane* PassengerPlaneFactory::create_passenger_plane(const char* manufacturer) {
    std::string strManufacturer(manufacturer);
    if (strManufacturer == "Boeing") {
        return new BoeingPassengerPlane();
    } else if (strManufacturer == "Airbus") {
        return new AirbusPassengerPlane();
    } else {
        return nullptr;
    }
}

// BoeingPassengerPlane.cpp

#include "PassengerPlane.h"
#include <iostream>

void BoeingPassengerPlane::fly() {
    std::cout << "Boeing passenger plane is flying." << std::endl;
}

// AirbusPassengerPlane.cpp

#include "PassengerPlane.h"
#include <iostream>

void AirbusPassengerPlane::fly() {
    std::cout << "Airbus passenger plane is flying." << std::endl;
}

// main.cpp

#include <iostream>
#include <Windows.h>
#include "PassengerPlaneFactory.h"

int main() {
    // Load the DLL dynamically
    HINSTANCE hDll = LoadLibrary("PassengerPlane.dll");
    if (!hDll) {
        std::cerr << "Failed to load DLL." << std::endl;
        return 1;
    }

    // Get a pointer to the factory method
    PassengerPlane* (*create_passenger_plane)(const char*) = (PassengerPlane* (*)(const char*))GetProcAddress(hDll, "create_passenger_plane");
    if (!create_passenger_plane) {
        std::cerr << "Failed to get factory method." << std::endl;
        return 1;
    }

    // Create a Boeing passenger plane using the factory method
    PassengerPlane* boeing_plane = create_passenger_plane("Boeing");
    if (boeing_plane) {
        boeing_plane->fly();
        delete boeing_plane;
    } else {
        std::cerr << "Failed to create Boeing passenger plane." << std::endl;
    }

    // Create an Airbus passenger plane using the factory method
    PassengerPlane* airbus_plane = create_passenger_plane("Airbus");
    if (airbus_plane) {
        airbus_plane->fly();
        delete airbus_plane;
    } else {
        std::cerr << "Failed to create Airbus passenger plane." << std::endl;
    }

    // Unload the DLL
    FreeLibrary(hDll);

    return 0;
}
